#! /usr/bin/python

import sys, re, os

try:
    from Config import *
except:
    print "Cannot find local settings file 'Config.py'.  You need to create a Config.py file that contains"
    print "settings appropriate for this copy of the FSWMS project.  You can use the file 'Config.py.template'"
    print "as a starting point --- make a copy of that file called 'Config.py', and edit appropriately."
    exit(-1)

class Template:
    def __init__(self, file=None, **args):
        if file is None and 'string' in args:
            self.contents = args['string']
        else:
            f = open(file, "r")
            self.contents = ""
            for line in f:
                self.contents = self.contents + line
            f.close
    def render(self, dict):
        return self.contents % dict


###
### Populate 'layerTitles' dict by reading contents from "layerTitles.txt" file:
###
try:
    f = open("layerTitles.txt", "r")
    layerTitles = {}
    for line in f:
        fields = re.split(r':', line.strip())
        layerTitles[fields[0]] = re.sub(r'^.*/([^/]+)$', '\\1', fields[1])
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("january", "jan")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("febuary", "feb")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("march", "mar")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("april", "apr")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("may", "may")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("june", "jun")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("july", "jul")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("august", "aug")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("september", "sep")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("october", "oct")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("november", "nov")
        layerTitles[fields[0]] = layerTitles[fields[0]].replace("december", "dec")
    f.close()
except:
    print "Can't read file layerTitles.txt; you must run 'makemap' before running this script!"
    sys.exit(-1)

wmsLayerTemplate = Template(string="""
        <wmsLayer
          lid="%(LAYER_LID)s"
          visible="%(LAYER_VISIBLE)s"
          url="%(SERVER_URL)s/ews?TRANSPARENT=true"
          srs="EPSG:3785"
          layers="%(LAYER_NAME)s"
          name="%(LAYER_TITLE)s"
          styles="default" 
          identify="true"
          legend="%(SERVER_URL)s/ewswgs84?SERVICE=WMS&REQUEST=GetLegendGraphic&layer=%(LAYER_NAME)s&VERSION=1.1.1&FORMAT=image/png"/>	
""")

tacsModisChangeDetectionProductLayers = ""
for subgroup in [
    { 'label' : '   Disturbances Since 2003 - All-Year',
      'layers' : [
            { 'name' : 'EFETAC-NASA_current',                   'lid' : 'AA',  'visible' : 'true'  },
            { 'name' : 'EFETAC-NASA_previous1',                 'lid' : 'AB',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_previous2',                 'lid' : 'AC',  'visible' : 'false' } ] },

    { 'label' : '   Disturbances Since 2010 - 1-Year Baseline',
      'layers' : [
            { 'name' : 'EFETAC-NASA_1YrBaseline_current',       'lid' : 'AD',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_1YrBaseline_previous1',     'lid' : 'AE',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_1YrBaseline_previous2',     'lid' : 'AF',  'visible' : 'false' } ] },

    { 'label' : '   Disturbances Since 2008 - 3-Year Baseline',
      'layers' : [
            { 'name' : 'EFETAC-NASA_3YrBaseline_current',       'lid' : 'AG',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_3YrBaseline_previous1',     'lid' : 'AH',  'visible' : 'false' },
            { 'name' : 'EFETAC-NASA_3YrBaseline_previous2',     'lid' : 'AI',  'visible' : 'false' } ] }
    ]:
    tacsModisChangeDetectionProductLayers = ( tacsModisChangeDetectionProductLayers +
        '      <wmsSubgroup label="' + subgroup['label'] + '">\n' )
    for layer in subgroup['layers']:
        tacsModisChangeDetectionProductLayers = tacsModisChangeDetectionProductLayers + wmsLayerTemplate.render({
                'SERVER_URL'    : SERVER_URL,
                'LAYER_LID'     : layer['lid'],
                'LAYER_NAME'    : layer['name'],
                'LAYER_VISIBLE' : layer['visible'],
                'LAYER_TITLE'   : layerTitles[layer['name']]
                })
    tacsModisChangeDetectionProductLayers = tacsModisChangeDetectionProductLayers + "      </wmsSubgroup>\n"

rsacModisChangeDetectionProductLayers = ""
for subgroup in [    
    { 'label' : '   Disturbances Since 2008 - 3-Year Baseline',
      'layers' : [
            { 'name' : 'RSAC-FHTET_current',                    'lid' : 'AM',  'visible' : 'false' },
            { 'name' : 'RSAC-FHTET_previous1',                  'lid' : 'AN',  'visible' : 'false' },
            { 'name' : 'RSAC-FHTET_previous2',                  'lid' : 'AP',  'visible' : 'false' } ] },
			
			{ 'label' : '   Disturbances Since 2008 - 5-Year Baseline',
      'layers' : [
            { 'name' : 'RSAC-FHTET_5YrBaseline_current',        'lid' : 'AQ',  'visible' : 'false' },
            { 'name' : 'RSAC-FHTET_5YrBaseline_previous1',      'lid' : 'AR',  'visible' : 'false' },
            { 'name' : 'RSAC-FHTET_5YrBaseline_previous2',      'lid' : 'AS',  'visible' : 'false' } ] }
### 
### Hey Matt:
###    The following RSAC layers are now available to be added, whenever you're ready!:
###       RSAC-FHTET_3YrBaseline_previous2
###       RSAC-FHTET_3YrBaseline_previous1
###       RSAC-FHTET_3YrBaseline_current
###       RSAC-FHTET_5YrBaselineBD_previous1
###       RSAC-FHTET_5YrBaselineBD_current
###       RSAC-FHTET_5YrBaselineBD_previous2
###       RSAC-FHTET_3YrBaselineBD_previous2
###       RSAC-FHTET_3YrBaselineBD_previous1
###       RSAC-FHTET_3YrBaselineBD_current
###       RSAC-FHTET_5YrBaseline_current
###       RSAC-FHTET_5YrBaseline_previous2
###       RSAC-FHTET_5YrBaseline_previous1
###   --Mark
### 
    ]:
    rsacModisChangeDetectionProductLayers = ( rsacModisChangeDetectionProductLayers +
        '      <wmsSubgroup label="' + subgroup['label'] + '">\n' )
    for layer in subgroup['layers']:
        rsacModisChangeDetectionProductLayers = rsacModisChangeDetectionProductLayers + wmsLayerTemplate.render({
                'SERVER_URL'    : SERVER_URL,
                'LAYER_LID'     : layer['lid'],
                'LAYER_NAME'    : layer['name'],
                'LAYER_VISIBLE' : layer['visible'],
                'LAYER_TITLE'   : layerTitles[layer['name']]
                })
    rsacModisChangeDetectionProductLayers = rsacModisChangeDetectionProductLayers + "      </wmsSubgroup>\n"


    
template = Template("ews_config.tpl.xml")

if not os.path.exists("../html/view/config"):
    os.makedirs("../html/view/config")


#Section to automate NRT 8 day layers for viewer config-----------------------------------
#http://stackoverflow.com/questions/932506/how-can-i-get-the-next-string-in-alphanumeric-ordering-in-python
def next_alpha(s):
    strip_zs = s.rstrip('z')
    if strip_zs:
        return (strip_zs[:-1] + chr(ord(strip_zs[-1]) + 1) + 'a' * (len(s) - len(strip_zs)))
    else:
        return 'a' * (len(s) + 1)

def getNRTLID(layerName):
    lids_list = []
    lyrs_list = []
    last_lid = ""
    f = open("NRTLayerLID.csv", "r");
    for line in f:
        sp = line.split(',')
        lyrs_list.append(sp[0])
        lids_list.append(sp[1])
    f.close();
    sorted_array = sorted(lids_list)
    sorted_array.reverse()
    #print "highest lid is %s" % sorted_array[0]
    highest_lid = sorted_array[0]
    nlid = next_alpha(highest_lid.lower().rstrip()) #rstrip removes any newline chars or white space
    if any(layerName.rstrip() in s for s in lyrs_list):#check to see if lid is already in list
        i = 0
        for item in lyrs_list:
            if lyrs_list[i]==layerName:
                nlid = lids_list[i]
            i = i + 1
    else: #this is new one, iterate and add to file
        #print "new one"
        f.close()
        f = open("NRTLayerLID.csv", "a");
        f.write(layerName+ "," + nlid.upper() + "\n")
        f.close()
    #print "layer: " + layerName + " lid: " + nlid.upper()
    return nlid.rstrip().upper()


def getNRTLayers(dataDir, groupName, wrapName, legendYesNo, fileExt):
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=False):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            nameform = re.sub(r'^.*/', '', tif)
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
               if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
               else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            layerTitle = tif
            lid = getNRTLID(layerName)
            if legendYesNo=="yes":
                legend = SERVER_URL+"/ewswgs84?SERVICE=WMS&REQUEST=GetLegendGraphic&layer=EFETAC-NASA_20100812&VERSION=1.1.1&FORMAT=image/png"
            else:
		legend = ""
            if groupName == "EFETAC-NASA_TC":
                layerTitle = "True Color " + layerName[-11:]
            else:
                layerTitle = layerName[-8:]
            if layerName[-2:].rstrip()!="bd": #this is one of those bd ones
                tifList.append({ 'LAYER_LID'       : lid,
                                 'WRAP_NAME'       : wrapName,
                                 'LAYER_NAME'      : layerName,
                                 'LAYER_TITLE'     : layerTitle,
                                 'SERVER_URL'      : SERVER_URL,
                                 'LEGEND'          : legend
                                 })
            layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layers = ""
    for tifdict in tifList:
	layers = layers + nrtWMSLayerTemplate.render(tifdict)    
    return layers

nrtWMSLayerTemplate = Template(string="""
        <wmsLayer
          lid="%(LAYER_LID)s"
          visible="false"
          url="%(SERVER_URL)s/%(WRAP_NAME)s?TRANSPARENT=true"
          srs="EPSG:3785"
          layers="%(LAYER_NAME)s"
          name="%(LAYER_TITLE)s"
          styles="default" 
          identify="true"
          legend="%(LEGEND)s"/>	
""")

nrtTCProductLayers = getNRTLayers(DATA_DIR + "/efetac_nasa/TrueColorData", "EFETAC-NASA_TC", "ewstruecolor", "no", ".img")
nrt1YrProductLayers = getNRTLayers(DATA_DIR + "/efetac_nasa/1Year", "EFETAC-NASA_1Year", "ews1year", "yes", ".tif")
nrt3YrProductLayers = getNRTLayers(DATA_DIR + "/efetac_nasa/3Year", "EFETAC-NASA_3Year", "ews3year", "yes", ".tif")
nrtAllYrProductLayers = getNRTLayers(DATA_DIR + "/efetac_nasa/AllYear", "EFETAC-NASA", "ews", "yes", ".tif")
#End NRT 8 day automation-------------------------------------------------

f = open("../html/view/config/ews_config.xml", "w")
f.write(template.render( {
            'SERVER_URL'                            : SERVER_URL,
            'VIEWER_DEPLOY_DIR_URL'                 : VIEWER_DEPLOY_DIR_URL,
            'TACS_MODIS_CHANGE_DETECTION_PRODUCT_LAYERS' : tacsModisChangeDetectionProductLayers,
	    'RSAC_MODIS_CHANGE_DETECTION_PRODUCT_LAYERS' : rsacModisChangeDetectionProductLayers,
            'NRT_MODISCloud__LAYERS'  : nrtTCProductLayers,
            'NRT_1YEAR_LAYERS'        : nrt1YrProductLayers,
            'NRT_3YEAR_LAYERS'        : nrt3YrProductLayers,
            'NRT_AllYEAR_LAYERS'      : nrtAllYrProductLayers
            }))
f.close()

if not os.path.exists("../html/cmapicons"):
    os.makedirs("../html/cmapicons")

os.system("cp -r cmapicons/* ../html/cmapicons")

