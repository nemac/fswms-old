#! /usr/bin/python

### creates the mapfile:
###    {ews.map,ewswgs84.map,ewswcs.map}
### from the template files
###    ews.map.tmpl   - template for whole mapfile
###    ews.layer.tmpl - template for each layer section
### by looping over all tif files found in
###    * LAYER_DATA_DIR
###    * DATA_DIR/efetac_nasa/ews
### 
### 
### added last night:
### 
###  * create ews1year.map using template ews1year.tpl.map
###  * create ews3year.map using template ews3year.tpl.map
###  * create ewstruecolor.map using template ewstruecolor.tpl.map


###
### imports
###

from osgeo import gdal, osr
import sys, os, subprocess, datetime, re, shutil;

###
### config
###

try:
    from Config import *
except:
    print "Cannot find local settings file 'Config.py'.  You need to create a Config.py file that contains"
    print "settings appropriate for this copy of the FSWMS project.  You can use the file 'Config.py.template'"
    print "as a starting point --- make a copy of that file called 'Config.py', and edit appropriately."
    exit(-1)

###
### function definitions
###

def rfind(dir, pattern):
    """Recursive find: returns a list of all files located in a directory or any of its descendent directories,
    and whose names match a regular expression pattern."""
    files = []
    for file in os.listdir(dir):
        if os.path.isdir(os.path.join(dir, file)):
            files = files + rfind(os.path.join(dir,file), pattern)
        if re.match(pattern, file):
            files.append(os.path.join(dir,file))
    return files

def getproj(tif):
    projectionWkt = getwkt(tif)
    spatialReferenceObj = osr.SpatialReference(projectionWkt)
    projectionProj4 = spatialReferenceObj.ExportToProj4()
    return projectionProj4

def interp(string):
  locals  = sys._getframe(1).f_locals
  globals = sys._getframe(1).f_globals
  for item in re.findall(r'#\{([^{]*)\}', string):
    string = string.replace('#{%s}' % item,
                            str(eval(item, globals, locals)))
  return string

def getwkt(tif):
    dataSet = gdal.Open( tif, gdal.GA_ReadOnly )
    return dataSet.GetProjection()

# formatproj reformats a "proj4" projection string into the form required by a Mapserver mapfile.
# Specifically, it splits it into one expression per line, delimited by double quotes.  It takes
# an optional indentation level, and indents the returned string by that number of spaces.
def formatproj(projstring, indentlevel=0):
    answer = ""
    indentation = " "*indentlevel
    lines = []
    for line in re.split(r'\s+', projstring):
        if line != "":
	   lines.append("%s%s\"%s\"" % (answer, indentation, line))
    return "\n".join(lines)

# getModDate gets the date when a file was last edited and formats that timestamp in a readable form
def getModDate(filename):
	t = os.stat(filename).st_mtime
	return datetime.datetime.fromtimestamp(t)

class Template:
    def __init__(self, file):
        f = open(file, "r")
        self.contents = ""
        for line in f:
            self.contents = self.contents + line
        f.close
    def render(self, dict):
        return self.contents % dict

#Start of attempt to create a generic function to get layers
#At this point its a not completely generic because the color maps is 
#specific to the tif files location
def getLayers(dataDir, layerTemplateName, groupName, fileExt):
    #print 'data dir ' + dataDir
    #print 'template ' + layerTemplateName
    tifList  = []
    for tif in sorted([file for file in os.listdir(dataDir) if file.endswith(fileExt)], reverse=False):
        try:        
            tif = re.sub('^' + dataDir + '/', '', tif)
            tif_fullpath = dataDir + '/' + tif;
            proj = getproj(tif_fullpath)
            modDate = getModDate(tif_fullpath)
            nameform = re.sub(r'^.*/', '', tif)
            #print nameform
            #this conditional logic needs to be refactored out
            if re.search(r'max|med', nameform):
                colormapline   = 'INCLUDE "efetac_nasa_percent_change_cmap.cmap"'
            elif re.search(r'.img', fileExt):
                colormapline   = ''
            else:
                colormapline   = 'INCLUDE "ewsold.cmap"'
            group = groupName 
            if re.search(r'.img', nameform):
                layerName = group + "_" + re.sub(r'_([^_]*_[^_]*)$', '', nameform)
            else:
                #jdm 1/26 check for the occurace of bd after the last underscore
                #this is the same layer but w/ a slightly diff algorithm on the remote
                #sensing side of things.
                if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
                else:
                    layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            layerTitle = tif
            tifList.append({ 'TIF'             : tif,
                             'PROJVALID'       : len(proj) > 0,
                             'PROJ'            : formatproj(proj,10),
                             'WKT'             : getwkt(tif_fullpath),
                             'NAME'            : layerName,
                             'GROUP'           : group,
                             'DATA'            : dataDir + '/' + tif,
                             'TITLE'           : layerTitle,
                             'ABSTRACT'        : layerTitle,
                             'COLORMAPLINE'    : colormapline
                             })
            layerTitles[layerName] = layerTitle
        except:
            print "except occured"
            continue
    layerTemplate = Template(layerTemplateName)
    layers = ""
    for tifdict in tifList:
        if tifdict['PROJVALID']:
            layers = layers + layerTemplate.render(tifdict)    
    return layers

mapfilesWritten = []

###
### This function simply opens a file for writing, and appends the name of the file
### to the mapfilesWritten array, which is used at the bottom of this script to
### write the index.html file with the list of all the WMS addresses.
###
def openMapfileForWriting(filename):
    mapfilesWritten.append(filename)
    return open(filename, "w");

### Begining of run-time code -----------------------------------------------------

###
### initialize a dict to keep track of layer titles (keyed by layer name):
###
layerTitles = {}

###
### initialize tiflist: array of dict objects holding info about each layer in mapfile(s)
###
tiflist = []

###
### create a tiflist entry for each .tif file in LAYER_DATA_DIR:
### these are symlinks of the most recent 3 
###
retroPattern = r'-retro/(.+)/'
for tif in rfind(LAYER_DATA_DIR, r'^.*\.tif$'):
    tif = re.sub('^' + LAYER_DATA_DIR + '/', '', tif)
    m = re.search(retroPattern, tif)
    if m != None:
        baseLineFolder = m.group(1) + "_"
    else:
        baseLineFolder = ""
    tif_fullpath = LAYER_DATA_DIR + '/' + tif;

    try:
        proj = getproj(tif_fullpath)
    except:
	continue

    if tif.startswith("rsac"):
        group          = "RSAC-FHTET"
        group_abstract = "Layers uploaded by RSAC-FHTET"
        colormapfile   = "rsac_fhtet_percent_change_cmap.cmap"
        colormapcsv    = "rsac_fhtet_percent_change_cmap.csv"
        #keyimage       = "rsac-fhtet-legend-v3-181x277-2011-06-24.png"
        keyimage       = "RSAC-FHTET_CT_7-6-2011_clipped.png"
    else:
        group          = "EFETAC-NASA"
        group_abstract = "Layers uploaded by TACs-NASA"
        colormapfile   = "efetac_nasa_percent_change_cmap.cmap"
        colormapcsv    = "efetac_nasa_percent_change_cmap.csv"
        #keyimage       = "tacs-nasa-legend-v3-181x277-2011-06-24.png"
        keyimage       = "TACs_NASA_CT_7-6-2011_clipped.png"

    modDate = getModDate(tif_fullpath)
    nameform = re.sub(r'^.*/', '', tif)
    nameformStart = re.sub(r'_.*$', '', nameform)
    layerNameForm = nameformStart

    layerName  = group + "_" + baseLineFolder + layerNameForm    # change this to be like "EFETAC-NASA_3yr-baseline_current"
    layerTitle = tif
    tiflist.append({ 'TIF'             : tif,
                     'PROJVALID'       : len(proj) > 0,
                     'PROJ'            : formatproj(proj,10),
                     'WKT'             : getwkt(tif_fullpath),
                     'NAME'            : layerName,
                     'GROUP'           : group,
                     'DATA'            : LAYER_DATA_DIR + '/' + tif,
                     'GROUP_ABSTRACT'  : group_abstract,
                     'TITLE'           : layerTitle, # change to be desired layer title in the viewer, e.g. efetac_nasa-retro/3YrBaseline/current_december3_december26.tif
                     'ABSTRACT'        : layerTitle, # change this to match title 
                     'COLORMAPFILE'    : colormapfile,
                     'COLORMAPCSV'     : colormapcsv,
                     #'KEYIMAGE'        : legendFile,
                     'KEYIMAGE'        : keyimage,
		     'MODDATE'	       : modDate
                     })
    layerTitles[layerName] = layerTitle

###
### create a tiflist entry for each .tif file in DATA_DIR+"/efetac_nasa/ews:
### these are the actual data files as they are dropped off via ftp
###
ARCHIVE_DIR = DATA_DIR + "/efetac_nasa/AllYear" #DATA_DIR is "/flood/fsdata" currently
for tif in sorted([file for file in os.listdir(ARCHIVE_DIR) if file.endswith(".tif")], reverse=False):
    try:
        tif = re.sub('^' + ARCHIVE_DIR + '/', '', tif)
        tif_fullpath = ARCHIVE_DIR + '/' + tif;
        proj = getproj(tif_fullpath)
        modDate = getModDate(tif_fullpath)
        nameform = re.sub(r'^.*/', '', tif)
        if tif.startswith("rsac"): #jdm: I don't think this if is needed Marked4Delete
            group = "RSAC-FHTET"
            group_abstract = "Layers uploaded by RSAC-FHTET"
            colormapfile   = "rsac_fhtet_percent_change_cmap.cmap"
            colormapcsv    = "rsac_fhtet_percent_change_cmap.csv"
            #keyimage       = "rsac-fhtet-legend-v3-181x277-2011-06-24.png"
            keyimage       = "RSAC-FHTET_CT_7-6-2011_clipped.png"
            print 'jdm: see this never prints'
        else:
            group = "EFETAC-NASA"
            group_abstract = "Layers uploaded by TACs-NASA"
            colormapfile   = "efetac_nasa_percent_change_cmap.cmap"
            colormapcsv    = "efetac_nasa_percent_change_cmap.csv"
            #keyimage       = "tacs-nasa-legend-v3-181x277-2011-06-24.png"
            keyimage       = "TACs_NASA_CT_7-6-2011_clipped.png"
        layerName  = group + "_" + re.sub(r'_.*$', '', nameform)
        layerTitle = tif

        #jdm 1/27 if it is a 2010 file use the old color map
        if re.search(r'2010', nameform):
            colormapfile = "ewsold.cmap"

        tiflist.append({ 'TIF'             : tif,
                         'PROJVALID'       : len(proj) > 0,
                         'PROJ'            : formatproj(proj,10),
                         'WKT'             : getwkt(tif_fullpath),
                         'NAME'            : layerName,
                         'GROUP'           : group,
                         'DATA'            : ARCHIVE_DIR + '/' + tif,
                         'GROUP_ABSTRACT'  : group_abstract,
                         'TITLE'           : layerTitle,
                         'ABSTRACT'        : layerTitle,
                         'COLORMAPFILE'    : colormapfile,
                         'COLORMAPCSV'     : colormapcsv,
                         'KEYIMAGE'        : keyimage,
                         'MODDATE'	   : modDate
                         })
        layerTitles[layerName] = layerTitle
    except:
        continue

###
### add in the rsac fhtet files to be available in an archive format
### these will go in ews.map also but will utilize a diff color map: rsac_fhtet_percent_change_cmap.cmap
###
ARCHIVE_DIR = DATA_DIR + "/rsac_fhtet/ews" #DATA_DIR is "/flood/fsdata" currently
for tif in sorted([file for file in os.listdir(ARCHIVE_DIR) if file.endswith(".tif")], reverse=False):
    try:
        tif = re.sub('^' + ARCHIVE_DIR + '/', '', tif)
        tif_fullpath = ARCHIVE_DIR + '/' + tif;
        proj = getproj(tif_fullpath)
        modDate = getModDate(tif_fullpath)
        nameform = re.sub(r'^.*/', '', tif)
        if ('3yr') in nameform or ('5yr') in nameform:
            group = "RSAC-FHTET"
            group_abstract = "Layers uploaded by RSAC-FHTET"
            colormapfile   = "rsac_fhtet_percent_change_cmap.cmap"
            colormapcsv    = "rsac_fhtet_percent_change_cmap.csv"
            keyimage       = "RSAC-FHTET_CT_7-6-2011_clipped.png"
            if re.sub(r'/.*\/|.*_|\.tif$', '', nameform) == "bd":
                layerName = group + "_" + re.sub(r'_.*$', '', nameform) + "bd"
            else:
                layerName = group + "_" + re.sub(r'_.*$', '', nameform)
            if '3yr' in nameform:
                layerName = layerName + "3yr"
            else:
                layerName = layerName + "5yr"
            layerTitle = tif
            tiflist.append({ 'TIF'             : tif,
                             'PROJVALID'       : len(proj) > 0,
                             'PROJ'            : formatproj(proj,10),
                             'WKT'             : getwkt(tif_fullpath),
                             'NAME'            : layerName,
                             'GROUP'           : group,
                             'DATA'            : ARCHIVE_DIR + '/' + tif,
                             'GROUP_ABSTRACT'  : group_abstract,
                             'TITLE'           : layerTitle,
                             'ABSTRACT'        : layerTitle,
                             'COLORMAPFILE'    : colormapfile,
                             'COLORMAPCSV'     : colormapcsv,
                             'KEYIMAGE'        : keyimage,
                             'MODDATE'	   : modDate
                             })
            layerTitles[layerName] = layerTitle	
    except:
        print 'except occured'
        continue


######################################

###
### build the LAYERS string by appending a rendered layer template for each valid layer:
###
layerTemplate = Template("ews.layer.tmpl")
LAYERS = ""
for tifdict in tiflist:
    if tifdict['PROJVALID']:
        LAYERS = LAYERS + layerTemplate.render( tifdict )

###
### write out three new mapfiles: ews.map, using EPSG 3785 (WebMercator),
### and ewswgs84, using EPSG 4326, and ewswcs, for serving WCS (using MapServer 6):
###
mapTemplate = Template("ews.map.tmpl")
SERVICE_NAME = "ews"
f_new = openMapfileForWriting("ews.map")
f_new.write( mapTemplate.render( {
            'LAYERS'                  : LAYERS,
#            'EPSG'                   : "3785",
            'WMS_SRS'                 : "EPSG:3785 EPSG:4326",
            'MAPFILE_PROJECTION'      : '"init=epsg:3785"',
            'SERVICE_NAME'            : SERVICE_NAME,
            'TEMP_FILE_PREFIX'        : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'                 : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'               : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'            : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'         : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'             : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'            : "../logs/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'    : SERVICE_NAME
            } ) )
f_new.close()

f_new = openMapfileForWriting("ewswgs84.map")
SERVICE_NAME = "ewswgs84"
f_new.write( mapTemplate.render( {
            'LAYERS'                  : LAYERS,
#           'EPSG'                    : "4326",
            'WMS_SRS'                 : "EPSG:4326",
            'MAPFILE_PROJECTION'      : '"init=epsg:4326"',
            'SERVICE_NAME'            : SERVICE_NAME,
            'TEMP_FILE_PREFIX'        : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'                 : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'               : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'            : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'         : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'             : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'            : "../logs/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'    : SERVICE_NAME
            } ) )
f_new.close()

f_new = openMapfileForWriting("ewswcs.map")
SERVICE_NAME = "ewswcs"
f_new.write( mapTemplate.render( {
            'LAYERS'                  : LAYERS,
#           'EPSG'                    : "2163",
            'WMS_SRS'                 : "EPSG:2163",
            'MAPFILE_PROJECTION'      : '"init=epsg:2163"',
            'SERVICE_NAME'            : SERVICE_NAME,
            'TEMP_FILE_PREFIX'        : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'                 : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'               : "NEMAC %s WCS" % (SERVICE_NAME),
            'OWS_ABSTRACT'            : "NEMAC %s WCS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'         : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'             : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'            : "../logs/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'    : SERVICE_NAME
            } ) )
f_new.close()


###
### CREATE ews1year.map FILE:
###
LAYERS = getLayers(DATA_DIR + "/efetac_nasa/1Year", "ews_gen.layer.tpl.map", "EFETAC-NASA_1Year", ".tif")
template = Template("ews_gen.tpl.map")
f_new = openMapfileForWriting("ews1year.map")
SERVICE_NAME = "ews1year"
WCS_LABEL = "EWS 1Year"
f_new.write( template.render( {
            'DATA_DIR'              : DATA_DIR,
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ews1year"),
            'LAYERS'                : LAYERS,
            'WMS_SRS'               : "EPSG:4326 EPSG:2163 EPSG:3785",
            'MAPFILE_PROJECTION'    : '"init=epsg:3785"',
            'SERVICE_NAME'          : SERVICE_NAME,
            'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'             : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'          : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'          : "../logs/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            'WCS_LABEL'             : WCS_LABEL
            } ) )
f_new.close()

###
### Create the ews3year.map file:
###
LAYERS = getLayers(DATA_DIR + "/efetac_nasa/3Year", "ews_gen.layer.tpl.map", "EFETAC-NASA_3Year", ".tif")
template = Template("ews_gen.tpl.map")
f_new = openMapfileForWriting("ews3year.map")
SERVICE_NAME = "ews3year"
WCS_LABEL = "EWS 3Year"
f_new.write( template.render( {
            'DATA_DIR'              : DATA_DIR,
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ews3year"),
            'LAYERS'                : LAYERS,
            'WMS_SRS'               : "EPSG:4326 EPSG:2163 EPSG:3785",
            'MAPFILE_PROJECTION'    : '"init=epsg:3785"',
            'SERVICE_NAME'          : SERVICE_NAME,
            'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'             : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_ABSTRACT'          : "NEMAC %s WMS" % (SERVICE_NAME),
            'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'          : "../logs/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            'WCS_LABEL'             : WCS_LABEL
            } ) )
f_new.close()

###
### Create the ewstruecolor.map file:
###
LAYERS = getLayers(DATA_DIR + "/efetac_nasa/TrueColorData", "truecolor.layer.tpl.map", "EFETAC-NASA_TC", ".img")
template = Template("ewstruecolor.tpl.map")
f_new = openMapfileForWriting("ewstruecolor.map")
SERVICE_NAME = "ewstruecolor"
WCS_LABEL = "Truecolor WCS"
#print LAYERS
f_new.write( template.render( {
            'DATA_DIR'              : DATA_DIR,
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, "ewstruecolor"),
            'LAYERS'                : LAYERS,
            'WMS_SRS'               : "EPSG:4326 EPSG:2163 EPSG:3785",
            'MAPFILE_PROJECTION'    : '"init=epsg:3785"',
            'SERVICE_NAME'          : SERVICE_NAME,
            'TEMP_FILE_PREFIX'      : "ms_%s" % (SERVICE_NAME),
            'MAPFILE'               : "%s/msconfig/%s.map" % (BASE_DIR, SERVICE_NAME),
            'OWS_TITLE'             : SERVICE_NAME,
            'OWS_ABSTRACT'          : SERVICE_NAME,
            'OWS_KEYWORDLIST'       : "mapserver,ogc,%s" % (SERVICE_NAME),
            'SERVICE_URL'           : "%s/%s" % (SERVER_URL, SERVICE_NAME),
            'MS_ERRORFILE'          : "../logs/%s.log" % (SERVICE_NAME),
            'WFS_NAMESPACE_PREFIX'  : SERVICE_NAME, 
            'WCS_LABEL'             : WCS_LABEL            
            } ) )
f_new.close()

###
### Create the vlayers.map file:
###
template = Template("vlayers.tpl.map")
f_new = openMapfileForWriting("vlayers.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'POSTGIS_CONNECTION_STRING' : POSTGIS_CONNECTION_STRING,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "vlayers")
            } ) )
f_new.close()

###
### Create the derivatives.map file:
###
template = Template("derivatives.tpl.map")
f_new = openMapfileForWriting("derivatives.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "derivatives")
            } ) )
f_new.close()

###
### Create the modisndvi.map file:
###
template = Template("modisndvi.tpl.map")
f_new = openMapfileForWriting("modisndvi.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "modisndvi")
            } ) )
f_new.close()

###
### Create the parameters.map file:
###
template = Template("parameters.tpl.map")
f_new = openMapfileForWriting("parameters.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "parameters")
            } ) )
f_new.close()

###
### Create the integrals.map file:
###
template = Template("integrals.tpl.map")
f_new = openMapfileForWriting("integrals.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "integrals")
            } ) )
f_new.close()

###
### Create the rlayers.map file:
###
template = Template("rlayers.tpl.map")
f_new = openMapfileForWriting("rlayers.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "rlayers")
            } ) )
f_new.close()

###
### Create the wlayers.map file:
###
template = Template("wlayers.tpl.map")
f_new = openMapfileForWriting("wlayers.map")
f_new.write( template.render( {
            'DATA_DIR'     : DATA_DIR,
            'SERVICE_URL'  : "%s/%s" % (SERVER_URL, "wlayers")
            } ) )
f_new.close()

#################################################################################################

###
### Create symlinks for the map files, and change a few permission settings
###
os.system("(cd ../html ; ln -f -s ../msconfig/ews.map . ; ln -f -s ../msconfig/ewswgs84.map . ; ln -f -s ../msconfig/ewswcs.map .)")
os.system("chmod a+w ../logs");
os.system("chmod a+w ../logs/*.log > /dev/null 2>&1");
os.system("chmod g-w ../html/*");

###
### write out the layer titles file:
###
f_out = open("layerTitles.txt", "w");
for layerName in layerTitles:
    f_out.write("%s:%s\n" % (layerName, layerTitles[layerName]))
f_out.close()

###
### write out the html/index.html file:
###
FSWMS_VERSION = subprocess.Popen(['../version'], stdout=subprocess.PIPE).communicate()[0].strip()
f_out = open("../html/index.html", "w");
f_out.write(interp("""
<table width="100%"><tr>
<td align="left">This is ForWarn version #{FSWMS_VERSION}.</td>
<td align="right">Viewer: <a href="view/index.html">view/index.html</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Config file: <a href="view/config/ews_config.xml">view/config/ews_config.xml</a></td>
</tr></table>
<p>
ForWarn WMS addresses are:
<ul>
"""))

for mapfile in mapfilesWritten:
    service = re.sub(r'\.map$', '', mapfile)
    f_out.write(interp("""<li><a href="#{SERVER_URL}/%(SERVICE)s">#{SERVER_URL}/%(SERVICE)s</a> [ <a href="#{SERVER_URL}/%(SERVICE)s?SERVICE=WMS&REQUEST=GetCapabilities">GetCapabilities</a> ]\n""" %
                       { "SERVICE" : service }))

f_out.write(interp("""</ul>\n"""))

f_out.close()
