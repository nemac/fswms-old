#! /usr/bin/python

import re, os, sys, subprocess

os.environ['PYTHONPATH'] = '/usr/local/lib64/python2.6/site-packages'

#
# KEEPERS is a list of files/directories in a deployed copy of fswms
# that should be preserved when a new copy is deployed on top of it.
# The deploying process will remove all current files and directories
# from the deployment directory, except for the ones listed here:
#
KEEPERS = ['msconfig/Config.py','msconfig/NRTLayerLID.csv','html/tmp', 'logs']

#
# DIRS_TO_ENSURE is a list of directories to be created in the deployment
# directory if they don't yet exist, along with "chmod" permissions to
# assign to them:
#
DIRS_TO_ENSURE = [
   {'dir':'html/tmp',  'perms':'a+rwx'},
   {'dir':'logs',      'perms':'a+rwx'}
]

    
#
# The deployment directory, where the production version of fswms is deployed:
#
def get_deploy_dir():
    if os.environ['FSWMS_DEPLOY_DIR'] != "":
        return os.environ['FSWMS_DEPLOY_DIR']
    if os.path.exists("/var/fswms.nemac.org"):
        return "/var/fswms.nemac.org"
    print "Cannot determine deploy directory path; set the FSWMS_DEPOLOY_DIR environment variable"
    sys.exit(-1)


def compare_versions(a,b):
    try:
        [amajor,aminor] = [int(x) for x in a.split('.')]
        [bmajor,bminor] = [int(x) for x in b.split('.')]
    except:
        if a < b:
            return -1
        elif a > b:
            return 1
        else:
            return 0
    if amajor < bmajor:
        return -1
    elif amajor > bmajor:
        return 1
    else:
        if aminor < bminor:
            return -1
        elif aminor > bminor:
            return 1
    return 0

def version_list():
    return sorted([re.sub(r'^fswms-(.*)$',r'\1',x) for x in subprocess.Popen(['git', 'tag'], stdout=subprocess.PIPE).communicate()[0].split('\n') if x != ''], cmp=compare_versions)

def version_exists(version):
    for v in version_list():
        if v == version:
            return True
    return False

def listfiles(dir):
   # Assuming that dir is a fswms directory, return a list of the
   # files (files only --- not directories) it contains, filterd to
   # include only the files that should be included in a deployment.
   # This omits certain files, such as any files in a .git or .svn
   # subdirectory, emacs backup (*~) files, and this fswms
   # script.
   files = [re.sub(r'^'+dir+'/', '', f)
            for f in subprocess.Popen(['find', dir, '-type', 'f', '-print'], stdout=subprocess.PIPE).communicate()[0].split('\n')
            if (re.search('.svn', f) == None) and (re.search('.git', f) == None)]
   files = [f for f in files
            if (
                (re.search(r'~$',f) == None)
	         and (f != 'fswms')
	         and (f != '')
                )]
   return files

def write_filelist(filename, filelist):
   # write a list of filenames to a file, one filename per line
   fp = open(filename, "w")
   for file in filelist:
      fp.write(file + "\n")
   fp.close()

class TmpFileManager:

    def __init__(self):
       self.files = []

    def tmpFile(self, name):
       self.files.append(name)
       return name

    def removeAll(self):
       for file in self.files:
          try:
             os.remove(file)
          except:
             continue

def deploy(DEPLOY_DIR):
    #
    # Make sure that the current directory is a fswms root directory
    #
    if (
       (not os.path.exists("./msconfig"))
       or (not os.path.exists("./msconfig/fscron"))
       or (not os.path.exists("./html"))
       ):
       print "Error: The current directory does not appear to be a fswms root directory."
       exit(-1)

    #
    # Load the Config.py file from DEPLOY_DIR/msconfig:
    #
    try:
        sys.path.append(DEPLOY_DIR + "/msconfig")
        #from Config import *
        import Config
    except:
        print "Cannot find 'Config.py' in %s/msconfig" % DEPLOY_DIR
        exit(-1)

    #
    # Check to make sure that the BASE_DIR specified in the DEPLOY_DIR/msconfig/Config.py
    # is the same as DEPLOY_DIR; if not, abort.
    #
    if os.path.abspath(DEPLOY_DIR) != os.path.abspath(Config.BASE_DIR):
       print "Error: the Config.py file in your specified DEPLOY_DIR (%s/Config.py)" % DEPLOY_DIR
       print "  sets BASE_DIR=%s" % Config.BASE_DIR
       print "  which is not the same as %s" % DEPLOY_DIR
       exit(-1)

    #
    # Use our little TmpFileManager class (defined above) to keep track of temporary files
    # that we need, so that they can be deleted when we're done.
    #
    tmpFileManager = TmpFileManager()
    KEEPERS_LIST   = tmpFileManager.tmpFile("/tmp/KEEPERS.list")
    KEEPERS_TAR    = tmpFileManager.tmpFile("/tmp/KEEPERS.tar")
    FILES_LIST     = tmpFileManager.tmpFile("/tmp/FILES.list")

    #
    # Write the KEEPERS list to a temporary file (KEEPERS_LIST), and save them in a temporary tar file (KEEPERS_TAR):
    #
    write_filelist(KEEPERS_LIST, KEEPERS)    
    os.system("(cd %s ; tar -c -f %s -T %s --ignore-failed-read)" % (DEPLOY_DIR,KEEPERS_TAR,KEEPERS_LIST))

    #
    # Write the list of files to be deployed from the current fswms dir to a temporary file (FILES_LIST):
    #
    write_filelist(FILES_LIST, listfiles('.'))

    #
    # Remove everything from the current DEPLOY_DIR
    #
    os.system("(cd %s ; rm -rf *)" % DEPLOY_DIR);

    #
    # Copy all the files from FILES_LIST to the DEPLOY_DIR:
    #
    os.system("tar -c -f - -T %s | ( cd %s ; tar xf - )" % (FILES_LIST,DEPLOY_DIR))

    #
    # Restore the files saved in KEEPERS_TAR:
    #
    os.system("(cd %s ; tar xf %s)" % (DEPLOY_DIR,KEEPERS_TAR))

    #
    # Ensure that every directory in DIRS_TO_ENSURE exists in the DEPLOY_DIR:
    #
    for dir in DIRS_TO_ENSURE:
        if not os.path.exists(DEPLOY_DIR + "/" + dir['dir']):
           os.mkdir(DEPLOY_DIR + "/" + dir['dir'])

    #
    # Change the group ownership of the whole deploy dir to 'fswms':
    #
    if os.environ['HOSTNAME'] == "rain":
        # if we're on server 'rain', change user ownership too!!!
        os.system("(cd %s ; chown -R fswms.fswms .)" % DEPLOY_DIR)
    else:
        os.system("(cd %s ; chgrp -R fswms .)" % DEPLOY_DIR)

    #
    # Make the whole DEPLOY_DIR directory tree group writeable:
    #
    os.system("(cd %s ; chmod -R g+w .)" % DEPLOY_DIR)

    #
    # For each directory in DIRS_TO_ENSURE, apply its permissions:
    #
    for dir in DIRS_TO_ENSURE:
       os.system("chmod %s %s/%s" % (dir['perms'],DEPLOY_DIR,dir['dir']))

    #
    # Remove temporary files:
    #
    tmpFileManager.removeAll();

########################################################################

def usage():
    print "usage: fswms COMMAND [ARG ...]"
    print "   where COMMAND is one of: 'list', 'create', 'delete', 'deploy'"
    exit(-1)

try:
    command = sys.argv[1]
except:
    usage()

if command == "list":
    print ("The currently tagged versions of fswms are: %s" % ", ".join(version_list()))
           
elif command == "create":
    version = sys.argv[2]
    if version_exists(version):
        print "Error: There is already a tagged version '%s'" % version
        exit(-1)
    tag = "fswms-%s" % version
    os.system("git tag -a -m 'create tags/%s' %s" % (tag,tag))
    print "created %s " % (tag)

elif command == "delete":
    version = sys.argv[2]
    if not version_exists(version):
        print "Error: There is no version tagged '%s'" % version
        exit(-1)
    tag = "fswms-%s" % version
    os.system("git tag -d %s" % tag)
    print "deleted %s " % tag

elif command == "deploy-dir":
    DEPLOY_DIR = sys.argv[2]
    tag = sys.argv[3]
    cwd = os.getcwd()
    os.chdir(".stage/%s" % tag)
    deploy(DEPLOY_DIR)
    os.chdir(cwd)

elif command == "deploy":
    DEPLOY_DIR = get_deploy_dir()
    version = sys.argv[2]
    if not version_exists(version):
        print "Error: There is no version '%s'" % version
        exit(-1)
    if compare_versions(version, "1.11") < 0 and os.environ['HOSTNAME'] == "rain":
        print "Versions prior to fswms-1.11 cannot be deployed on server 'rain'"
        exit(-1)
    tag = "fswms-%s" % version
    os.system("/bin/rm -rf .stage")
    os.mkdir(".stage")
    print "getting a copy of %s..." % tag
    os.system("git archive --format=tar %s | (cd .stage ; tar xf -)" % (tag))
    fp = open(".stage/version", "w")
    fp.write("#! /usr/bin/python\n")
    fp.write("\n")
    fp.write("print \"%s\"\n" % tag)
    fp.close()
    os.system("chmod +x .stage/version")
    print "deploying %s to %s..." % (tag,DEPLOY_DIR)
    if os.environ['HOSTNAME'] == "rain":
        os.system("sudo ./fswms deploy-dir %s %s" % (DEPLOY_DIR,tag))
    else:
        os.system("./fswms deploy-dir %s %s" % (DEPLOY_DIR,tag))
    exit(0)
    print "running %s/msconfig/fscron..." % DEPLOY_DIR
    if os.environ['HOSTNAME'] == "rain":
        os.system("cd %s/msconfig ; sudo su fswms ./fscron" % DEPLOY_DIR)
    else:
        os.system("cd %s/msconfig ; ./fscron" % DEPLOY_DIR)
    print "cleaning up..."
    os.system("/bin/rm -rf .stage")
    print "done."

else:
    usage()
